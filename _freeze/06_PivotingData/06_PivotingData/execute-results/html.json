{
  "hash": "806a8789896ecb9cbf48e9c796a2ccc6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Pivoting Data\"\norder: 6\ntitle-slide-attributes:\n    data-background-gradient: linear-gradient(to top right, {{< brand color background >}}, {{< brand color pastelpink >}}, {{< brand color fmorange >}}, {{< brand color tangerine >}})\n\nformat: \n  revealjs:\n    margin: .15\n    quarto-required: \">= 1.6.0\"\n    width: 1600\n    height: 900\n    slide-number: \"c\"\n    css: ../styles.css\n    code-copy: true\n    echo: true\n    code-overflow: scroll\n---\n\n::: {.cell}\n\n:::\n\n\n\n# Data: Sales\n## Data: Sales\n\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.column}\n### We have...\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 4\n  customer_id item_1 item_2      \n        <dbl> <chr>  <chr>       \n1           1 bread  milk        \n2           2 milk   toilet paper\n# ℹ 1 more variable:\n#   item_3 <chr>\n```\n\n\n:::\n:::\n\n\n:::\n\n:::: {.column}\n::: {.fragment}\n### We want...\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  customer_id item_no item       \n        <dbl> <chr>   <chr>      \n1           1 item_1  bread      \n2           1 item_2  milk       \n3           1 item_3  banana     \n4           2 item_1  milk       \n5           2 item_2  toilet pap…\n6           2 item_3  <NA>       \n```\n\n\n:::\n:::\n\n\n:::\n::::\n\n## A grammar of data tidying\n\n::: {.column}\n\n\n::: {.cell caption='tidyr is part of the tidyverse'}\n::: {.cell-output-display}\n![](images/tidyr-part-of-tidyverse.png){width=60%}\n:::\n:::\n\n\n:::\n\n::: {.column}\nThe goal of tidyr is to help you tidy your data via\n\n- pivoting for going between wide and long data\n- splitting and combining character columns\n- nesting and unnesting columns\n- clarifying how `NA`s should be treated\n:::\n\n# Pivoting data {background-gradient=\"linear-gradient(to bottom right, #FFFFFF, #7CDCFF, #7CDCFF, #7CDCFF)\"}\n\n## Not this...\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/pivot.gif){fig-align='center' width=70%}\n:::\n:::\n\n\n\n## but this!\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/tidyr-longer-wider.gif){fig-align='center' width=45% style=\"background-color: #F0F0F0\"}\n:::\n:::\n\n\n\n## Wider vs. longer\n\n::: {.column}\n### wider\nmore columns\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 4\n  customer_id item_1 item_2      \n        <dbl> <chr>  <chr>       \n1           1 bread  milk        \n2           2 milk   toilet paper\n# ℹ 1 more variable:\n#   item_3 <chr>\n```\n\n\n:::\n:::\n\n\n:::\n\n:::: {.column}\n::: {.fragment}\n### longer\nmore rows\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  customer_id item_no item       \n        <dbl> <chr>   <chr>      \n1           1 item_1  bread      \n2           1 item_2  milk       \n3           1 item_3  banana     \n4           2 item_1  milk       \n5           2 item_2  toilet pap…\n6           2 item_3  <NA>       \n```\n\n\n:::\n:::\n\n\n:::\n::::\n\n# Pivoting to Long Data {background-gradient=\"linear-gradient(to bottom right, #FFFFFF, #FECCDD, #FECCDD, #FECCDD)\"}\n\n## `pivot_longer()`\n\n::: {.column}\n- `data` (as usual)\n:::\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\npivot_longer(\n  data,\n  cols, \n  names_to = \"name\", \n  values_to = \"value\"\n  )\n```\n:::\n\n\n:::\n\n## `pivot_longer()` {auto-animate=true}\n\n::: {.column}\n- `data` (as usual)\n- `cols`: columns to pivot into longer format \n:::\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\npivot_longer(\n  data,\n  cols, \n  names_to = \"name\", \n  values_to = \"value\"\n  )\n```\n:::\n\n\n:::\n\n## `pivot_longer()` {auto-animate=true}\n\n::: {.column}\n- `data` (as usual)\n- `cols`: columns to pivot into longer format \n- `names_to`: name of the column where column names of pivoted variables go (character string)\n:::\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\npivot_longer(\n  data,\n  cols, \n  names_to = \"name\", \n  values_to = \"value\"\n  )\n```\n:::\n\n\n:::\n\n## `pivot_longer()` {auto-animate=true}\n\n::: {.column}\n- `data` (as usual)\n- `cols`: columns to pivot into longer format \n- `names_to`: name of the column where column names of pivoted variables go (character string)\n- `values_to`: name of the column where data in pivoted variables go (character string)\n:::\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\npivot_longer(\n  data,\n  cols, \n  names_to = \"name\", \n  values_to = \"value\"\n  )\n```\n:::\n\n\n:::\n\n## Why pivot?\n\n::: {.incremental}\n- Let's say we want to determine the total cost spent by customer.\n- We have the items that each customer bought, and the cost per item.\n- Will be easiest to:\n    - make customer data long, so each row is a purchase\n    - merge on the cost for each item\n    - sum costs by customer\n    \n::: \n\n## Why pivot?\n\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustomers\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 4\n  customer_id item_1 item_2      \n        <dbl> <chr>  <chr>       \n1           1 bread  milk        \n2           2 milk   toilet paper\n# ℹ 1 more variable:\n#   item_3 <chr>\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprices\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  item         price\n  <chr>        <dbl>\n1 avocado       0.5 \n2 banana        0.15\n3 bread         1   \n4 milk          0.8 \n5 toilet paper  3   \n```\n\n\n:::\n:::\n\n\n:::\n\n\n## Customers $\\rightarrow$ purchases\n\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|3\"}\npurchases <- customers %>%\n  pivot_longer( \n    cols = item_1:item_3,\n    names_to = \"item_no\",\n    values_to = \"item\"\n    ) \n```\n:::\n\n\n:::\n\n::: {.column}\n- pivot variables item_1 to item_3\n:::\n\n\n## Customers $\\rightarrow$ purchases {auto-animate=true}\n\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\npurchases <- customers %>%\n  pivot_longer( \n    cols = item_1:item_3,\n    names_to = \"item_no\",\n    values_to = \"item\"\n    ) \n```\n:::\n\n\n:::\n\n::: {.column}\n- pivot variables item_1 to item_3\n- column names -> new column called item_no\n:::\n\n## Customers $\\rightarrow$ purchases {auto-animate=true}\n\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\npurchases <- customers %>%\n  pivot_longer( \n    cols = item_1:item_3,\n    names_to = \"item_no\",\n    values_to = \"item\"\n    ) \n```\n:::\n\n\n:::\n\n::: {.column}\n- pivot variables item_1 to item_3\n- column names -> new column called item_no\n- values in columns -> new column called item\n:::\n\n## Customers $\\rightarrow$ purchases {auto-animate=true}\n\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npurchases <- customers %>%\n  pivot_longer( \n    cols = item_1:item_3,\n    names_to = \"item_no\",\n    values_to = \"item\"\n    ) \n\npurchases\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  customer_id item_no item       \n        <dbl> <chr>   <chr>      \n1           1 item_1  bread      \n2           1 item_2  milk       \n3           1 item_3  banana     \n4           2 item_1  milk       \n5           2 item_2  toilet pap…\n6           2 item_3  <NA>       \n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column}\n- pivot variables item_1 to item_3\n- column names -> new column called item_no\n- values in columns -> new column called item\n:::\n\n## Customers $\\rightarrow$ purchases {auto-animate=true}\n\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"9,10\"}\npurchases <- customers %>%\n  pivot_longer( \n    cols = item_1:item_3,\n    names_to = \"item_no\",\n    values_to = \"item\"\n    ) \n\npurchases %>% \n  left_join(prices, \n            by=\"item\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  customer_id item_no item  price\n        <dbl> <chr>   <chr> <dbl>\n1           1 item_1  bread  1   \n2           1 item_2  milk   0.8 \n3           1 item_3  bana…  0.15\n4           2 item_1  milk   0.8 \n5           2 item_2  toil…  3   \n6           2 item_3  <NA>  NA   \n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column}\n- pivot variables item_1 to item_3\n- column names -> new column called item_no\n- values in columns -> new column called item\n- `left_join()` the prices data to get the cost per item\n:::\n\n## Customers $\\rightarrow$ purchases {auto-animate=true}\n\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"11-14\"}\npurchases <- customers %>%\n  pivot_longer( \n    cols = item_1:item_3,\n    names_to = \"item_no\",\n    values_to = \"item\"\n    ) \n\npurchases %>% \n  left_join(prices, \n            by=\"item\") %>% \n  group_by(customer_id) %>% \n  summarize(total_price = \n              sum(price, \n                  na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  customer_id total_price\n        <dbl>       <dbl>\n1           1        1.95\n2           2        3.8 \n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column}\n- pivot variables item_1 to item_3\n- column names -> new column called item_no\n- values in columns -> new column called item\n- `left_join()` the prices data to get the cost per item\n- `group_by()` and `summarize()` to get the total price for each customer\n:::\n\n# Pivoting to Wide Data {background-gradient=\"linear-gradient(to bottom right, #FFFFFF, #7CDCFF, #7CDCFF, #7CDCFF)\"}\n\n## `pivot_wider()`\n\n::: {.column}\n- `data` (as usual)\n- **Different from `pivot_longer()`**: No column information is needed\n:::\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\npivot_wider(\n  data,\n  names_from = \"name\", \n  values_from = \"value\"\n  )\n```\n:::\n\n\n:::\n\n## `pivot_wider()` {auto-animate=true}\n\n::: {.column}\n- `data` (as usual)\n- **Different from `pivot_longer()`**: No column information is needed\n- `names_from`: name of the column where variables are located\n:::\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\npivot_wider(\n  data,\n  names_from = \"name\", \n  values_from = \"value\"\n  )\n```\n:::\n\n\n:::\n\n## `pivot_wider()` {auto-animate=true}\n\n::: {.column}\n- `data` (as usual)\n- **Different from `pivot_longer()`**: No column information is needed\n- `names_from`: name of the column where variables are located\n- `values_from`: name of the column where data/values are located\n:::\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\npivot_longer(\n  data,\n  cols, \n  names_to = \"name\", \n  values_to = \"value\"\n  )\n```\n:::\n\n\n:::\n\n\n## Purchases $\\rightarrow$ customers\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npurchases %>%\n  pivot_wider( \n    names_from = item_no, \n    values_from = item \n  ) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 4\n  customer_id item_1 item_2       item_3\n        <dbl> <chr>  <chr>        <chr> \n1           1 bread  milk         banana\n2           2 milk   toilet paper <NA>  \n```\n\n\n:::\n:::\n\n\n\n# Your turn: <br>`pivot_longer`, `pivot_wider` {background-gradient=\"linear-gradient(to bottom, #FFFFFF, #FFFFFF, #6BE1CA)\"}\n\n✋ if you have questions or need help\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M123.6 391.3c12.9-9.4 29.6-11.8 44.6-6.4c26.5 9.6 56.2 15.1 87.8 15.1c124.7 0 208-80.5 208-160s-83.3-160-208-160S48 160.5 48 240c0 32 12.4 62.8 35.7 89.2c8.6 9.7 12.8 22.5 11.8 35.5c-1.4 18.1-5.7 34.7-11.3 49.4c17-7.9 31.1-16.7 39.4-22.7zM21.2 431.9c1.8-2.7 3.5-5.4 5.1-8.1c10-16.6 19.5-38.4 21.4-62.9C17.7 326.8 0 285.1 0 240C0 125.1 114.6 32 256 32s256 93.1 256 208s-114.6 208-256 208c-37.1 0-72.3-6.4-104.1-17.9c-11.9 8.7-31.3 20.6-54.3 30.6c-15.1 6.6-32.3 12.6-50.1 16.1c-.8 .2-1.6 .3-2.4 .5c-4.4 .8-8.7 1.5-13.2 1.9c-.2 0-.5 .1-.7 .1c-5.1 .5-10.2 .8-15.3 .8c-6.5 0-12.3-3.9-14.8-9.9c-2.5-6-1.1-12.8 3.4-17.4c4.1-4.2 7.8-8.7 11.3-13.5c1.7-2.3 3.3-4.6 4.8-6.9c.1-.2 .2-.3 .3-.5z\"/></svg>`{=html} when you are finished\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_8bb3151a\" data-update-every=\"1\" data-play-sound=\"true\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">15</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}