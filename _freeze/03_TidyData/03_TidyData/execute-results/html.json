{
  "hash": "0baf106d1328e39031b1474a6dadd6cd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Wrangling\"\norder: 3\ntitle-slide-attributes:\n    data-background-gradient: linear-gradient(to top right, {{< brand color background >}}, {{< brand color pastelpink >}}, {{< brand color fmorange >}}, {{< brand color tangerine >}})\n\nformat: \n  revealjs:\n    margin: .15\n    quarto-required: \">= 1.6.0\"\n    width: 1600\n    height: 900\n    slide-number: \"c\"\n    css: ../styles.css\n    code-copy: true\n    echo: true\n    code-overflow: scroll\n---\n\n::: {.cell}\n\n:::\n\n\n\n# Tidy data {background-gradient=\"linear-gradient(to bottom right, #FFFFFF, #7CDCFF, #7CDCFF, #7CDCFF)\"}\n\n## Characteristics of tidy data\n\n::: {.incremental}\n-   Each variable forms a column.\n-   Each observation forms a row.\n-   Each type of observational unit forms a table.\n:::\n\n# Grammar of data wrangling {background-gradient=\"linear-gradient(to bottom right, #FFFFFF, #FECCDD, #FECCDD, #FECCDD)\"}\n\n## A grammar of data wrangling...\n\n... based on the concepts of functions as verbs that manipulate data frames\n\n::: column\n\n\n::: {.cell caption='dplyr is part of the tidyverse'}\n::: {.cell-output-display}\n![](images/dplyr-part-of-tidyverse.png){width=70%}\n:::\n:::\n\n\n:::\n\n::: column\n-   `select`: pick columns by name\n-   `arrange`: reorder rows\n-   `filter`: pick rows matching criteria\n-   `distinct`: filter for unique rows\n-   `mutate`: add new variables\n-   `summarise` or `summarize`: agreggation of values\n-   `group_by`: for grouped operations\n-   ... (many more)\n:::\n\n## Rules of **dplyr** functions\n\n::: incremental\n-   First argument is *always* a data frame\n-   Subsequent arguments say what to do with that data frame\n-   Always return a data frame\n-   Don't modify in place\n:::\n\n\n## First look: Variables\n\n\n\n::: {.cell output.lines='18'}\n\n```{.r .cell-code}\nnames(starwars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"name\"       \"height\"     \"mass\"       \"hair_color\"\n [5] \"skin_color\" \"eye_color\"  \"birth_year\" \"sex\"       \n [9] \"gender\"     \"homeworld\"  \"species\"    \"films\"     \n[13] \"vehicles\"   \"starships\" \n```\n\n\n:::\n:::\n\n\n\n## Second look: Overview\n\n\n\n::: {.cell output.lines='18'}\n\n```{.r .cell-code}\nglimpse(starwars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 87\nColumns: 14\n$ name       <chr> \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Dart…\n$ height     <int> 172, 167, 96, 202, 150, 178, 165, 97, 183…\n$ mass       <dbl> 77, 75, 32, 136, 49, 120, 75, 32, 84, 77,…\n$ hair_color <chr> \"blond\", NA, NA, \"none\", \"brown\", \"brown,…\n$ skin_color <chr> \"fair\", \"gold\", \"white, blue\", \"white\", \"…\n$ eye_color  <chr> \"blue\", \"yellow\", \"red\", \"yellow\", \"brown…\n$ birth_year <dbl> 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0…\n$ sex        <chr> \"male\", \"none\", \"none\", \"male\", \"female\",…\n$ gender     <chr> \"masculine\", \"masculine\", \"masculine\", \"m…\n$ homeworld  <chr> \"Tatooine\", \"Tatooine\", \"Naboo\", \"Tatooin…\n$ species    <chr> \"Human\", \"Droid\", \"Droid\", \"Human\", \"Huma…\n$ films      <list> <\"A New Hope\", \"The Empire Strikes Back\"…\n$ vehicles   <list> <\"Snowspeeder\", \"Imperial Speeder Bike\">…\n$ starships  <list> <\"X-wing\", \"Imperial shuttle\">, <>, <>, …\n```\n\n\n:::\n:::\n\n\n\n\n## Select a single column\n\nView only `homeworld`\n\n. . .\n\n::: column\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1\"}\nselect(\n  starwars, \n  homeworld\n  )\n```\n:::\n\n\n:::\n\n::: column\n-   Start with the function (a verb): `select()`\n:::\n\n## Select a single column {auto-animate=true}\n\nView only `homeworld`\n\n::: column\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nselect( \n  starwars,\n  homeworld\n  )\n```\n:::\n\n\n:::\n\n::: column\n-   Start with the function (a verb): `select()`\n-   First argument: data frame we're working with , `starwars`\n:::\n\n## Select a single column\n\nView only `homeworld`\n\n::: column\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nselect( \n  starwars, \n  homeworld\n  )\n```\n:::\n\n\n:::\n\n::: column\n-   Start with the function (a verb): `select()`\n-   First argument: data frame we're working with , `starwars`\n-   Second argument: variable we want to select, `homeworld`\n:::\n\n## Select a single column\n\nView only `homeworld`\n\n::: column\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect( \n  starwars, \n  homeworld\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 × 1\n   homeworld\n   <chr>    \n 1 Tatooine \n 2 Tatooine \n 3 Naboo    \n 4 Tatooine \n 5 Alderaan \n 6 Tatooine \n 7 Tatooine \n 8 Tatooine \n 9 Tatooine \n10 Stewjon  \n# ℹ 77 more rows\n```\n\n\n:::\n:::\n\n\n:::\n\n::: column\n-   Start with the function (a verb): `select()`\n-   First argument: data frame we're working with , `starwars`\n-   Second argument: variable we want to select, `homeworld`\n-   Result: data frame with 87 rows and 1 column\n:::\n\n# {background-gradient=\"radial-gradient(#FFA219, #FFFFFF, #FFFFFF)\"}\n\n::: {.tip}\n💡<b>Tip!</b> <br><br> dplyr functions always expect a data frame and always yield a data frame\n:::\n\n## Select multiple\n\n- Can select more than one variable\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(starwars,\n       name, homeworld)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 × 2\n   name               homeworld\n   <chr>              <chr>    \n 1 Luke Skywalker     Tatooine \n 2 C-3PO              Tatooine \n 3 R2-D2              Naboo    \n 4 Darth Vader        Tatooine \n 5 Leia Organa        Alderaan \n 6 Owen Lars          Tatooine \n 7 Beru Whitesun Lars Tatooine \n 8 R5-D4              Tatooine \n 9 Biggs Darklighter  Tatooine \n10 Obi-Wan Kenobi     Stewjon  \n# ℹ 77 more rows\n```\n\n\n:::\n:::\n\n\n\n# {background-gradient=\"radial-gradient(#FFA219, #FFFFFF, #FFFFFF)\"}\n\n::: {.tip}\n💡<b>Tip!</b> <br><br> the order you specify your variables in `select()` is the order they appear in the output dataset\n:::\n\n\n# Working with data in R {background-gradient=\"linear-gradient(to bottom right, #FFFFFF, #7CDCFF, #7CDCFF, #7CDCFF)\"}\n\n## Objects\n\n::: {.incremental}\n\n- R is an object oriented programming language\n- Everything is an object (datasets, arrays, lists, globals, etc.)\n- Can have multiple datasets, arrays, etc. in your environment\n  - When creating, editing, manipulating data you **must** first reference the data/object of interest\n\n:::\n\n## Workflow\n\nSay we want to narrow our dataset to only see the `name` and `homeworld` variables and sort the data by `homeworld`\n\n::::: {.columns}\n:::: {.column}\n::: {.fragment}\n### Select\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>%\n  select(name, homeworld)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 × 2\n   name               homeworld\n   <chr>              <chr>    \n 1 Luke Skywalker     Tatooine \n 2 C-3PO              Tatooine \n 3 R2-D2              Naboo    \n 4 Darth Vader        Tatooine \n 5 Leia Organa        Alderaan \n 6 Owen Lars          Tatooine \n 7 Beru Whitesun Lars Tatooine \n 8 R5-D4              Tatooine \n 9 Biggs Darklighter  Tatooine \n10 Obi-Wan Kenobi     Stewjon  \n# ℹ 77 more rows\n```\n\n\n:::\n:::\n\n\n:::\n::::\n:::: {.column}\n::: {.fragment}\n### Select, then arrange\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>%\n  select(name, homeworld) %>%\n  arrange(homeworld)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 × 2\n   name                homeworld     \n   <chr>               <chr>         \n 1 Leia Organa         Alderaan      \n 2 Bail Prestor Organa Alderaan      \n 3 Raymus Antilles     Alderaan      \n 4 Ratts Tyerel        Aleen Minor   \n 5 Lobot               Bespin        \n 6 Jek Tono Porkins    Bestine IV    \n 7 Nute Gunray         Cato Neimoidia\n 8 Ki-Adi-Mundi        Cerea         \n 9 Mas Amedda          Champala      \n10 Mon Mothma          Chandrila     \n# ℹ 77 more rows\n```\n\n\n:::\n:::\n\n\n:::\n::::\n:::::\n\n## Pipes\n\nIn programming, a pipe is a technique for passing information from one process to another.\n\n::: {.column}\n- Start with the data frame `starwars`, and pass it to the `select()` function,\n:::\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1\"}\nstarwars %>%\n  select(name, homeworld) %>%\n  arrange(homeworld)\n```\n:::\n\n\n:::\n\n## Pipes\n\nIn programming, a pipe is a technique for passing information from one process to another.\n\n::: {.column}\n- Start with the data frame `starwars`, and pass it to the `select()` function,\n- then we select the variables `name` and `homeland`,\n:::\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nstarwars %>%\n  select(name, homeworld) %>%\n  arrange(homeworld)\n```\n:::\n\n\n:::\n\n## Pipes\n\nIn programming, a pipe is a technique for passing information from one process to another.\n\n::: {.column}\n- Start with the data frame `starwars`, and pass it to the `select()` function,\n- then we select the variables `name` and `homeland`,\n- and then we arrange the data frame by `homeland`\n:::\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nstarwars %>%\n  select(name, homeworld) %>%\n  arrange(homeworld)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 × 2\n   name                homeworld     \n   <chr>               <chr>         \n 1 Leia Organa         Alderaan      \n 2 Bail Prestor Organa Alderaan      \n 3 Raymus Antilles     Alderaan      \n 4 Ratts Tyerel        Aleen Minor   \n 5 Lobot               Bespin        \n 6 Jek Tono Porkins    Bestine IV    \n 7 Nute Gunray         Cato Neimoidia\n 8 Ki-Adi-Mundi        Cerea         \n 9 Mas Amedda          Champala      \n10 Mon Mothma          Chandrila     \n# ℹ 77 more rows\n```\n\n\n:::\n:::\n\n\n:::\n\n## How does a pipe work?\n\n- You can think about the following sequence of actions - find keys, \nunlock car, start car, drive to work, park.\n\n. . .\n\n- Expressed as a set of nested functions in R pseudocode this would look like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npark(drive(start_car(find(\"keys\")), to = \"work\"))\n```\n:::\n\n\n\n. . .\n\n- Writing it out using pipes give it a more natural (and easier to read) \nstructure:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfind(\"keys\") %>%\n  start_car() %>%\n  drive(to = \"work\") %>%\n  park()\n```\n:::\n\n\n\n\n## Aside\n\nThe pipe operator is implemented in the package **magrittr**, though we don't need to load this package explicitly since **tidyverse** does this for us.\n\n::::: {.columns}\n:::: {.column}\n::: {.fragment}\n\n\n::: {.cell caption='Magritte\\'s pipe'}\n::: {.cell-output-display}\n![](images/magritte.jpg){width=90%}\n:::\n:::\n\n\n\n> The Treachery of Images\n>\n> René Magritte\n\n:::\n::::\n\n:::: {.column}\n::: {.fragment}\n\n\n::: {.cell layout-align=\"center\" caption='magrittr\\'s pipe'}\n::: {.cell-output-display}\n![](images/magrittr-hex.png){fig-align='center' width=50%}\n:::\n:::\n\n\n:::\n::::\n:::::\n\n## A note on piping and layering\n\n::: {.incremental}\n- `%>%` used mainly in **dplyr** pipelines, *we pipe the output of the previous line of code as the first input of the next line of code*\n\n- `+` used in **ggplot2** plots is used for \"layering\", *we create the plot in layers, separated by `+`*\n:::\n\n## dplyr\n\n❌\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars +\n  select(name, homeland)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'name' not found\n```\n\n\n:::\n:::\n\n\n\n✅\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>%\n  select(name, homeland)\n```\n:::\n\n\n\n## ggplot2\n\n❌\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(starwars, aes(x = homeworld, fill = sex)) %>%\n  geom_bar()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `geom_bar()`:\n! `mapping` must be created by `aes()`.\nℹ Did you use `%>%` or `|>` instead of `+`?\n```\n\n\n:::\n:::\n\n\n\n✅\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(starwars, aes(x = homeworld, fill = sex)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](03_TidyData_files/figure-revealjs/ggplot-plus-1.png){width=25%}\n:::\n:::\n\n\n\n\n## Code styling\n\nMany of the styling principles are consistent across `%>%` and `+`:\n\n- always a space before\n- always a line break after (for pipelines with more than 2 lines)\n\n❌\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(starwars,aes(x=homeworld,fill=sex))+geom_bar()\n```\n:::\n\n\n\n✅\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(starwars, aes(x = homeworld, fill = sex)) + \n  geom_bar()\n```\n:::\n",
    "supporting": [
      "03_TidyData_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}